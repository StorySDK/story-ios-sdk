// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
// swift-module-flags: -target arm64-apple-ios13.1-macabi -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ios_sdk
import AVFoundation
import Foundation
import QuartzCore
import Swift
import UIKit
import _Concurrency
@_exported import ios_sdk
public struct AnswerValue {
  public init()
  public init(from dict: ios_sdk.Json)
}
public enum WidgetTypes : Swift.String {
  case RECTANGLE
  case ELLIPSE
  case TEXT
  case SWIPE_UP
  case SLIDER
  case QUESTION
  case CLICK_ME
  case TALK_ABOUT
  case EMOJI_REACTION
  case TIMER
  case CHOOSE_ANSWER
  case GIPHY
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct AppLocalization : Swift.Codable {
  public let default_locale: Swift.String
  public let languages: [Swift.String]
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct FontParamsValue : Swift.Codable {
  public let style: Swift.String
  public let weight: Swift.Double
  public init()
  public init(from dict: ios_sdk.Json)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public typealias Json = [Swift.String : Any]
public let pinkColor: UIKit.UIColor
public let sliderTint: UIKit.UIColor
public let sliderStart: UIKit.UIColor
public let sliderFinish: UIKit.UIColor
public let purpleStart: UIKit.UIColor
public let purpleFinish: UIKit.UIColor
public let blue: UIKit.UIColor
public let darkBlue: UIKit.UIColor
public let white: UIKit.UIColor
public let green: UIKit.UIColor
public let orange: UIKit.UIColor
public let orangeRed: UIKit.UIColor
public let yellow: UIKit.UIColor
public let black: UIKit.UIColor
public let red: UIKit.UIColor
public let gray: UIKit.UIColor
public let darkGray: UIKit.UIColor
public struct AppGroupView : Swift.Codable {
  public let android: Swift.String
  public let web: Swift.String
  public let ios: Swift.String
  public let react: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct GiphyWidget : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
  public init()
  public init(from dict: ios_sdk.Json)
}
public enum BackgroundValue : Swift.String {
  case image
  case video
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum WidgetType {
  case rectangle(ios_sdk.RectangleWidget), ellipse(ios_sdk.EllipseWidget), emoji(ios_sdk.EmojiReactionWidget), choose_answer(ios_sdk.ChooseAnswerWidget), text(ios_sdk.TextWidget), swipe_up(ios_sdk.SwipeUpWidget), click_me(ios_sdk.ClickMeWidget), slider(ios_sdk.SliderWidget), question(ios_sdk.QuestionWidget), talk_about(ios_sdk.TalkAboutWidget), giphy(ios_sdk.GiphyWidget), timer(ios_sdk.TimerWidget)
}
public struct EmojiReactionWidget {
  public init()
  public init(from dict: ios_sdk.Json)
}
public struct WidgetPositionLimits {
  public let minWidth: Swift.Double?
  public let minHeight: Swift.Double?
  public let keepRatio: Swift.Bool?
  public let ratioIndex: Swift.Double?
  public init()
  public init(from dict: ios_sdk.Json)
}
public struct EmojiValue {
  public let name: Swift.String
  public let unicode: Swift.String
  public init()
  public init(from dict: ios_sdk.Json)
}
public struct SliderWidget {
  public init()
  public init(from dict: ios_sdk.Json)
}
public struct QuestionWidget : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
  public init()
  public init(from dict: ios_sdk.Json)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class ConfettiView : UIKit.UIView {
  public enum ConfettiType {
    case confetti
    case triangle
    case star
    case diamond
    case image(UIKit.UIImage)
  }
  @_Concurrency.MainActor(unsafe) public var colors: [UIKit.UIColor]!
  @_Concurrency.MainActor(unsafe) public var intensity: Swift.Float!
  @_Concurrency.MainActor(unsafe) public var type: ios_sdk.ConfettiView.ConfettiType!
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) public func startConfetti()
  @_Concurrency.MainActor(unsafe) public func stopConfetti()
  @_Concurrency.MainActor(unsafe) public func isActive() -> Swift.Bool
  @objc deinit
}
public struct WidgetPosition {
  public let x: Swift.Double
  public let y: Swift.Double
  public let width: ios_sdk.SizeType
  public let height: ios_sdk.SizeType
  public let realWidth: Swift.Double?
  public let realHeight: Swift.Double?
  public let rotate: Swift.Double
  public init()
  public init(from dict: ios_sdk.Json)
}
public enum Colors : Swift.String {
  case purple
  case blue
  case darkBlue
  case white
  case green
  case orange
  case orangeRed
  case yellow
  case black
  case red
  case grey
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct ClickMeWidget {
  public init()
  public init(from dict: ios_sdk.Json)
}
public enum SizeType {
  case double(Swift.Double), string(Swift.String)
}
public struct StoryGroup : Swift.Codable {
  public let id: Swift.String
  public let app_id: Swift.String
  public let user_id: Swift.String
  public let title: [Swift.String : Swift.String]
  public let image_url: [Swift.String : Swift.String]
  public let start_time: Swift.String
  public let end_time: Swift.String
  public let statistic: ios_sdk.StoreGroupStatistic?
  public let active: Swift.Bool
  public let created_at: Swift.String
  public let updated_at: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct ChooseAnswerWidget {
  public init()
  public init(from dict: ios_sdk.Json)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class StoriesViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public init(_ stories: [ios_sdk.Story], for group: ios_sdk.StoryGroup, activeOnly: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLoad()
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLayoutSubviews()
}
extension ios_sdk.StoriesViewController : UIKit.UIPageViewControllerDelegate, UIKit.UIPageViewControllerDataSource {
  @_Concurrency.MainActor(unsafe) @objc final public func pageViewController(_ pageViewController: UIKit.UIPageViewController, viewControllerBefore viewController: UIKit.UIViewController) -> UIKit.UIViewController?
  @_Concurrency.MainActor(unsafe) @objc final public func pageViewController(_ pageViewController: UIKit.UIPageViewController, viewControllerAfter viewController: UIKit.UIViewController) -> UIKit.UIViewController?
  @_Concurrency.MainActor(unsafe) @objc final public func pageViewController(_ pageViewController: UIKit.UIPageViewController, willTransitionTo pendingViewControllers: [UIKit.UIViewController])
  @_Concurrency.MainActor(unsafe) @objc final public func pageViewController(_ pageViewController: UIKit.UIPageViewController, didFinishAnimating finished: Swift.Bool, previousViewControllers: [UIKit.UIViewController], transitionCompleted completed: Swift.Bool)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class StorySDK : ObjectiveC.NSObject {
  convenience public init(_ id: Swift.String, userID: Swift.String? = nil, preferredLanguage: Swift.String)
  final public func setDefaultLanguage(_ language: Swift.String)
  final public func setProgressDuration(_ duration: Foundation.TimeInterval)
  final public func setProgressColor(_ color: UIKit.UIColor)
  final public func setFullScreen(_ need: Swift.Bool)
  final public func setTitleEnabled(_ enabled: Swift.Bool)
  @objc deinit
}
extension ios_sdk.StorySDK {
  final public func getApps(completion: @escaping (Swift.Error?, ios_sdk.StoryApp?) -> Swift.Void)
  final public func getApp(appID: Swift.String, completion: @escaping (Swift.Error?, ios_sdk.StoryApp?) -> Swift.Void)
}
extension ios_sdk.StorySDK {
  final public func getGroups(statistic: Swift.Bool? = nil, date_from: Swift.String? = nil, date_to: Swift.String? = nil, completion: @escaping (Swift.Error?, [ios_sdk.StoryGroup]?) -> Swift.Void)
  final public func getGroups(appID: Swift.String, statistic: Swift.Bool? = nil, date_from: Swift.String? = nil, date_to: Swift.String? = nil, completion: @escaping (Swift.Error?, [ios_sdk.StoryGroup]?) -> Swift.Void)
  final public func getGroup(appID: Swift.String, groupID: Swift.String, statistic: Swift.Bool? = nil, date_from: Swift.String? = nil, date_to: Swift.String? = nil, completion: @escaping (Swift.Error?, ios_sdk.StoryGroup?) -> Swift.Void)
}
extension ios_sdk.StorySDK {
  final public func getStories(_ group: ios_sdk.StoryGroup, statistic: Swift.Bool? = nil, completion: @escaping (Swift.Error?, [ios_sdk.Story]?) -> Swift.Void)
  final public func getStories(appID: Swift.String, groupID: Swift.String, statistic: Swift.Bool? = nil, completion: @escaping (Swift.Error?, [ios_sdk.Story]?) -> Swift.Void)
}
public struct EllipseWidget {
  public init()
  public init(from dict: ios_sdk.Json)
}
public struct StoryData {
  public init()
  public init(from dict: ios_sdk.Json)
}
public struct RectangleWidget {
  public init()
  public init(from dict: ios_sdk.Json)
}
public struct ColorValue {
  public init()
  public init(from dict: ios_sdk.Json)
}
public enum BorderType {
  case color(ios_sdk.ColorValue), gradient(ios_sdk.GradientValue), null(Swift.String)
}
#warning("Надо разобраться с видео для background")
public enum BackgroundType {
  case color(ios_sdk.ColorValue), gradient(ios_sdk.GradientValue), null(Swift.String)
}
public struct GradientValue {
  public init()
  public init(from dict: ios_sdk.Json)
}
public struct WidgetData {
  public let id: Swift.String
  public let position: ios_sdk.WidgetPosition
  public let positionLimits: ios_sdk.WidgetPositionLimits
  public let content: ios_sdk.WidgetContent
  public init()
  public init(from dict: ios_sdk.Json)
}
extension UIKit.UIImageView {
  @_Concurrency.MainActor(unsafe) public func load(url: Foundation.URL, completion: (() -> Swift.Void)? = nil)
}
extension UIKit.UIImage {
  @nonobjc public func resized(to newSize: CoreGraphics.CGSize, scale: CoreGraphics.CGFloat = 1) -> UIKit.UIImage
}
public struct StoryApp : Swift.Codable {
  public let id: Swift.String
  public let user_id: Swift.String
  public let title: Swift.String
  public let ios_app_id: Swift.String
  public let android_app_id: Swift.String
  public let share: Swift.Bool
  public let sdk_token: Swift.String
  public let settings: ios_sdk.AppSettings
  public let localization: ios_sdk.AppLocalization
  public let created_at: Swift.String
  public let updated_at: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Instance : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct TimerWidget : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
  public init()
  public init(from dict: ios_sdk.Json)
}
public struct StoreGroupStatistic : Swift.Codable {
  public let open: Swift.Int
  public let impression: Swift.Int
  public let duration: Swift.Double
  public let click: Swift.Int
  public init()
  public init(from dict: ios_sdk.Json)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct StoreStatistic : Swift.Codable {
  public let next: Swift.Int
  public let back: Swift.Double
  public let duration: Swift.Int
  public let views: Swift.Int
  public let close: Swift.Int
  public let actions: Swift.Int
  public init()
  public init(from dict: ios_sdk.Json)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct TextWidget {
  public init()
  public init(from dict: ios_sdk.Json)
}
public struct IconValue {
  public init()
  public init(from dict: ios_sdk.Json)
}
public struct Story {
  public init()
  public init(from dict: ios_sdk.Json)
  public func getStoryData() -> ios_sdk.StoryData
}
public struct TalkAboutWidget : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
  public init()
  public init(from dict: ios_sdk.Json)
}
public struct WidgetContent {
  public let type: ios_sdk.WidgetTypes
  public let params: ios_sdk.WidgetType
  public let widgetImage: Swift.String?
  public init()
  public init(from dict: ios_sdk.Json)
}
public struct SwipeUpWidget {
  public init()
  public init(from dict: ios_sdk.Json)
}
public struct AppSettings : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension ios_sdk.WidgetTypes : Swift.Equatable {}
extension ios_sdk.WidgetTypes : Swift.Hashable {}
extension ios_sdk.WidgetTypes : Swift.RawRepresentable {}
extension ios_sdk.BackgroundValue : Swift.Equatable {}
extension ios_sdk.BackgroundValue : Swift.Hashable {}
extension ios_sdk.BackgroundValue : Swift.RawRepresentable {}
extension ios_sdk.Colors : Swift.Equatable {}
extension ios_sdk.Colors : Swift.Hashable {}
extension ios_sdk.Colors : Swift.RawRepresentable {}
