# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

require 'digest'
require 'uri'
require 'net/http'
require 'json'

default_platform(:ios)

desc 'Prepare cached media files for storysdk'
lane :prepare_story_cache do |options|
  cache_onboarding(options[:group], options[:token])
end

def cache_onboarding(group_id, sdk_api_token)
  cache = {}

  uri = URI("https://api.storysdk.com/sdk/v1/groups/#{group_id}/stories")
  request = Net::HTTP::Get.new(uri)
  request['Authorization'] ="SDK #{sdk_api_token}"

  https = Net::HTTP.new(uri.host, uri.port)
  https.use_ssl = true

  response = https.request(request)
  if response.code.to_i == 200
      json = JSON.parse(response.body)
      raise StandardError, json["error"] unless json["error"].empty?
  else
    raise StandardError, response.code
  end 

  data = json["data"]
  data.each do |item| 
    storyData = item["story_data"]
    background = storyData["background"]

    if !background.nil?
      type = background["type"]
      if type == "video"
        background_video_url = background["value"]
      end
    end

    unless background_video_url.nil?
      digest = Digest::SHA256.hexdigest background_video_url
      key = File.basename(background_video_url)
      ext = File.extname(background_video_url)

      Dir.mkdir('./cached') unless Dir.exist?('./cached')
      File.open("./cached/#{digest}#{ext}", 'wb') do |file|
        file << URI.open(background_video_url).read
      end

      UI.message "Cached #{digest}#{ext}"
      cache[key] = "#{digest}#{ext}"
    end

    widgets = storyData["widgets"]

    widgets.each do |widget|
      content = widget["content"]
      params = content["params"]

      if !params.nil?
        video_url = params["videoUrl"]
      end

      unless video_url.nil?
        digest = Digest::SHA256.hexdigest video_url
        key = File.basename(video_url)
        ext = File.extname(video_url)

        Dir.mkdir('./cached') unless Dir.exist?('./cached')
        File.open("./cached/#{digest}#{ext}", 'wb') do |file|
          file << URI.open(video_url).read
        end

        UI.message "Cached #{digest}#{ext}"
        cache[key] = "#{digest}#{ext}"
      end
    end
  end
end
