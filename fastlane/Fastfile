# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

require 'digest'
require 'open-uri'
require 'json'

default_platform(:ios)

desc 'Prepare cached media files for storysdk'
lane :prepare_story_cache do |options|
  cache_onboarding(options[:group])
end

def cache_onboarding(group_id)
  cache = {}

  response = JSON.parse(URI.open("https://api.storysdk.com/sdk/v1/groups/#{group_id}/stories").read)
  raise StandardError, response["error"] unless response["error"].empty?

  data = response["data"]
  data.each do |item| 
    storyData = item["story_data"]
    background = storyData["background"]

    if !background.nil?
      type = background["type"]
      if type == "video"
        background_video_url = background["value"]
      end
    end

    unless background_video_url.nil?
      digest = Digest::SHA256.hexdigest background_video_url
      key = File.basename(background_video_url)
      ext = File.extname(background_video_url)

      Dir.mkdir('./cached') unless Dir.exist?('./cached')
      File.open("./cached/#{digest}#{ext}", 'wb') do |file|
        file << URI.open(background_video_url).read
      end

      cache[key] = "#{digest}#{ext}"
    end

    widgets = storyData["widgets"]

    widgets.each do |widget|
      content = widget["content"]
      params = content["params"]

      puts ""
      puts content

      if !params.nil?
        video_url = params["videoUrl"]
      end

      unless video_url.nil?
        digest = Digest::SHA256.hexdigest video_url
        key = File.basename(video_url)
        ext = File.extname(video_url)

        Dir.mkdir('./cached') unless Dir.exist?('./cached')
        File.open("./cached/#{digest}#{ext}", 'wb') do |file|
          file << URI.open(video_url).read
        end

        cache[key] = "#{digest}#{ext}"
      end
    end
  end
end
